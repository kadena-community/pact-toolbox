name: pact-transformer CI

permissions:
  id-token: write
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEBUG: napi:*
  APP_NAME: pact-transformer
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: "1"

on:
  push:
    branches:
      - main
    tags:
      - "@pact-toolbox/pact-transformer@*"
    paths-ignore:
      - "**/*.md"
      - "LICENSE"
      - "**/*.gitignore"
      - ".editorconfig"
      - "docs/**"
  pull_request:
    branches:
      - main
    paths:
      - "crates/pact-transformer/**"
      - ".github/workflows/pact-transformer-ci.yml"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint TypeScript/JavaScript
        run: cd crates/pact-transformer && pnpm lint
      - name: Check Rust formatting
        run: cd crates/pact-transformer && cargo fmt -- --check
      - name: Clippy
        run: cd crates/pact-transformer && cargo clippy -- -D warnings

  build:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              cd crates/pact-transformer
              pnpm build
              strip -x *.node
          - host: windows-latest
            build: cd crates/pact-transformer && pnpm build
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              corepack disable || true &&
              apt-get update && apt-get install -y libc6-dev build-essential curl xz-utils &&
              curl -fsSL https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz | tar -xJ -C /usr/local --strip-components=1 &&
              rustup target add x86_64-unknown-linux-gnu &&
              cd crates/pact-transformer &&
              npm install -g pnpm@10.12.4 &&
              export CC_x86_64_unknown_linux_gnu=gcc &&
              export AR_x86_64_unknown_linux_gnu=ar &&
              export CFLAGS_x86_64_unknown_linux_gnu="-D_GNU_SOURCE -D_DEFAULT_SOURCE" &&
              export CPPFLAGS_x86_64_unknown_linux_gnu="-D_GNU_SOURCE -D_DEFAULT_SOURCE" &&
              export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=gcc &&
              export RUSTFLAGS="-C link-arg=-Wl,--no-as-needed" &&
              pnpm build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |-
              rustup target add x86_64-unknown-linux-musl &&
              cd crates/pact-transformer &&
              pnpm build --target x86_64-unknown-linux-musl &&
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              rustup target add aarch64-apple-darwin
              cd crates/pact-transformer
              pnpm build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              corepack disable || true &&
              apt-get update && apt-get install -y build-essential gcc-aarch64-linux-gnu curl xz-utils &&
              curl -fsSL https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz | tar -xJ -C /usr/local --strip-components=1 &&
              rustup target add aarch64-unknown-linux-gnu &&
              cd crates/pact-transformer &&
              npm install -g pnpm@10.12.4 &&
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc &&
              export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar &&
              export CFLAGS_aarch64_unknown_linux_gnu="-D_GNU_SOURCE -D_DEFAULT_SOURCE" &&
              export CPPFLAGS_aarch64_unknown_linux_gnu="-D_GNU_SOURCE -D_DEFAULT_SOURCE" &&
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc &&
              export RUSTFLAGS="-C link-arg=-Wl,--no-as-needed" &&
              pnpm build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: |-
              rustup target add aarch64-unknown-linux-musl &&
              cd crates/pact-transformer &&
              pnpm build --target aarch64-unknown-linux-musl &&
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node || strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |-
              rustup target add aarch64-pc-windows-msvc &&
              cd crates/pact-transformer &&
              pnpm build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.13.0
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            crates/pact-transformer/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: macos-latest
            target: x86_64-apple-darwin
        node:
          - "20"
          - "22"
          - "24"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/pact-transformer
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: cd crates/pact-transformer && pnpm test
        env:
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
          - "24"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: crates/pact-transformer
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Check downloaded artifacts
        run: |
          ls -la crates/pact-transformer/
          file crates/pact-transformer/*.node 2>/dev/null || echo "No .node files found"
          ldd crates/pact-transformer/*.node 2>/dev/null || echo "Cannot check .node file dependencies"
          # Test if the module can be loaded directly
          cd crates/pact-transformer && node -e "try { require('./index.js'); console.log('Native module loads correctly'); } catch(e) { console.error('Module loading error:', e.message); process.exit(1); }"
        shell: bash
      - name: Test bindings
        run: cd crates/pact-transformer && pnpm test
        env:
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu
          DEBUG: napi:*
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
          - "24"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: crates/pact-transformer
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-alpine
          options: "-v ${{ github.workspace }}:/build -w /build"
          run: |
            set -e
            apk add --no-cache npm file
            corepack disable || true
            npm install -g pnpm@10.12.4
            pnpm install --frozen-lockfile
            cd crates/pact-transformer
            ls -la *.node
            file *.node 2>/dev/null || echo "No .node files found"
            node -e "try { require('./index.js'); console.log('Native module loads correctly'); } catch(e) { console.error('Module loading error:', e.message); process.exit(1); }"
            pnpm test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
          - "24"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: pnpm/action-setup@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: crates/pact-transformer
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build"
          run: |
            set -e
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y ca-certificates gnupg curl
            mkdir -p /etc/apt/keyrings
            curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
            echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_${{ matrix.node }}.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
            apt-get update
            apt-get install -y nodejs
            corepack disable || true
            npm install -g pnpm@10.12.4
            pnpm config set supportedArchitectures.cpu "arm64"
            pnpm config set supportedArchitectures.libc "glibc"
            pnpm install --frozen-lockfile
            export LD_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu:/lib/aarch64-linux-gnu
            cd crates/pact-transformer && pnpm test
  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@lts
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: crates/pact-transformer
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build"
          run: |
            set -e
            apk add --no-cache npm file python3 make g++
            corepack disable || true
            npm install -g pnpm@10.12.4
            pnpm config set supportedArchitectures.cpu "arm64"
            pnpm config set supportedArchitectures.libc "musl"
            # Skip postinstall scripts to avoid qemu issues
            pnpm install --frozen-lockfile --ignore-scripts
            cd crates/pact-transformer
            ls -la *.node
            file *.node 2>/dev/null || echo "No .node files found"
            node -e "try { require('./index.js'); console.log('Native module loads correctly'); } catch(e) { console.error('Module loading error:', e.message); process.exit(1); }"
            pnpm test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/@pact-toolbox/pact-transformer@')
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: crates/pact-transformer/artifacts
      - name: Move artifacts
        run: cd crates/pact-transformer && pnpm artifacts
      - name: List packages
        run: ls -R ./crates/pact-transformer/npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          cd crates/pact-transformer
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
