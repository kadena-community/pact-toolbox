/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface PactModule {
  name: string;
  namespace?: string;
  doc?: string;
  governance: string;
  functions: Array<PactFunction>;
  capabilities: Array<PactCapability>;
  schemas: Array<PactSchema>;
  constants: Array<PactConstant>;
  uses: Array<string>;
  implements: Array<string>;
}
export interface PactFunction {
  name: string;
  doc?: string;
  parameters: Array<PactParameter>;
  returnType?: string;
  body: string;
  isDefun: boolean;
}
export interface PactCapability {
  name: string;
  doc?: string;
  parameters: Array<PactParameter>;
  returnType?: string;
  managed?: ManagedInfo;
  isEvent: boolean;
}
export interface ManagedInfo {
  parameter: string;
  managerFunction?: string;
}
export interface PactSchema {
  name: string;
  doc?: string;
  fields: Array<SchemaField>;
}
export interface SchemaField {
  name: string;
  fieldType: string;
}
export interface PactConstant {
  name: string;
  doc?: string;
  constantType?: string;
  value: string;
}
export interface PactParameter {
  name: string;
  parameterType?: string;
}
export interface PactConfig {
  /** Transformation options */
  transform?: TransformOptions;
  /** File output options */
  fileOutput?: FileOutputOptions;
  /** Watch mode options */
  watch?: WatchOptions;
  /** Plugin configurations */
  plugins?: Array<PluginConfig>;
  /** Configuration presets */
  presets?: Record<string, ConfigPreset>;
  /** Environment-specific overrides */
  env?: Record<string, EnvironmentConfig>;
  /** Extends another configuration file */
  extends?: string;
}
export interface PluginConfig {
  /** Plugin name or path */
  name: string;
  /** Plugin options */
  options?: Record<string, any>;
  /** Whether the plugin is enabled */
  enabled?: boolean;
}
export interface ConfigPreset {
  /** Preset name */
  name: string;
  /** Preset description */
  description?: string;
  /** Transform options for this preset */
  transform?: TransformOptions;
  /** File output options for this preset */
  fileOutput?: FileOutputOptions;
  /** Watch options for this preset */
  watch?: WatchOptions;
}
export interface EnvironmentConfig {
  /** Transform options override */
  transform?: TransformOptions;
  /** File output options override */
  fileOutput?: FileOutputOptions;
  /** Watch options override */
  watch?: WatchOptions;
  /** Plugin overrides */
  plugins?: Array<PluginConfig>;
}
/** Config loader result */
export interface ConfigLoadResult {
  /** The loaded configuration */
  config: PactConfig;
  /** Path to the configuration file */
  configPath?: string;
  /** Whether default config was used */
  isDefault: boolean;
}
export interface FileOutputOptions {
  /** Output directory for generated files */
  outputDir: string;
  /** Output format: js-types (separate .js and .d.ts), ts (single .ts file), or js-only */
  format: string;
  /** Whether to create output directory if it doesn't exist */
  createDir?: boolean;
  /** Whether to preserve source directory structure */
  preserveStructure?: boolean;
  /** Base path to strip from source files when preserving structure */
  basePath?: string;
  /** File extension to use for output files (default based on format) */
  extension?: string;
  /** Source map generation options */
  sourceMaps?: SourceMapOptions;
}
export interface FileTransformResult {
  /** Input file path that was processed */
  inputPath: string;
  /** Output file paths that were created */
  outputPaths: Array<string>;
  /** Whether the transformation was successful */
  success: boolean;
  /** Error message if transformation failed */
  error?: string;
  /** Processing time in milliseconds */
  processingTimeMs: number;
}
/** NAPI-exposed plugin configuration */
export interface PluginInfo {
  /** Plugin name */
  name: string;
  /** Plugin description */
  description: string;
  /** Whether the plugin is enabled */
  enabled: boolean;
  /** Plugin options */
  options?: Record<string, any>;
}
export interface SourceMapOptions {
  /** Whether to generate source maps */
  generate?: boolean;
  /** Whether to inline source maps in the generated files */
  inline?: boolean;
  /** Whether to include original source content in the source map */
  sourcesContent?: boolean;
  /** File extension for separate source map files */
  fileExtension?: string;
  /** Base URL for source files (for web deployment) */
  sourceRoot?: string;
  /** Whether to include names mapping for better debugging */
  includeNames?: boolean;
  /** Whether to generate declaration maps for TypeScript files */
  declarationMap?: boolean;
}
/** Transformation result */
export interface TransformationResult {
  modules: Array<PactModule>;
  code: string;
  types: string;
  sourceMap?: string;
  declarationMap?: string;
}
/** Transform options */
export interface TransformOptions {
  generateTypes?: boolean;
  moduleName?: string;
  sourceMaps?: boolean;
  sourceFilePath?: string;
  declarationMaps?: boolean;
}
export interface WatchOptions {
  /** Glob patterns to watch - examples: all pact files, src folder pact files */
  patterns: Array<string>;
  /** Directories to watch recursively */
  directories?: Array<string>;
  /** File extensions to watch (default: [pact]) */
  extensions?: Array<string>;
  /** Debounce delay in milliseconds (default: 100ms) */
  debounceMs?: number;
  /** Maximum number of concurrent transformations (default: CPU count) */
  maxConcurrent?: number;
  /** Whether to process existing files on startup */
  initialTransform?: boolean;
  /** Whether to watch for file deletions and clean up output files */
  handleDeletions?: boolean;
}
export interface WatchEvent {
  /** Type of event: added, modified, removed */
  eventType: string;
  /** Path of the file that changed */
  filePath: string;
  /** Transform result (if applicable) */
  transformResult?: FileTransformResult;
  /** Timestamp of the event */
  timestamp: number;
}
export interface WatchStats {
  /** Number of files currently being watched */
  watchedFiles: number;
  /** Total number of transformation events processed */
  totalTransforms: number;
  /** Number of successful transformations */
  successfulTransforms: number;
  /** Number of failed transformations */
  failedTransforms: number;
  /** Average transformation time in milliseconds */
  avgTransformTimeMs: number;
  /** Time since watch started in milliseconds */
  uptimeMs: number;
}
/** Simplified configuration interface for PactTransformer */
export interface PactTransformerConfig {
  plugins?: Array<PluginConfig>;
  transform?: TransformOptions;
  fileOutput?: FileOutputOptions;
  watch?: WatchOptions;
}
/** Options for transformFile method */
export interface TransformFileOptions {
  transformOptions?: TransformOptions;
  watch?: boolean;
}
/** Options for transformFiles method */
export interface TransformFilesOptions {
  transformOptions?: TransformOptions;
  watch?: boolean;
}
/** Factory function to create a PactTransformer */
export declare function createPactTransformer(config?: PactTransformerConfig | undefined | null): PactTransformer;
/** Transform operation result */
export interface TransformResult {
  javascript: string;
  typescript?: string;
  sourceMap?: string;
  declarationMap?: string;
}
/** File operation result */
export interface FileResult {
  sourcePath: string;
  outputPath?: string;
  success: boolean;
  error?: string;
  timeMs: number;
}
/** Batch operation result */
export interface BatchResult {
  successCount: number;
  errorCount: number;
  totalTimeMs: number;
  files: Array<FileResult>;
}
/** Module information */
export interface ModuleInfo {
  name: string;
  namespace?: string;
  governance: string;
  doc?: string;
  functionCount: number;
  schemaCount: number;
  capabilityCount: number;
  constantCount: number;
}
/** Error information */
export interface ErrorInfo {
  message: string;
  line: number;
  column: number;
}
/** Watch statistics */
export interface WatchStatsResult {
  watchedFiles: number;
  totalTransforms: number;
  successfulTransforms: number;
  failedTransforms: number;
  avgTransformTimeMs: number;
  uptimeMs: number;
}
/** Main PactTransformer with configuration-driven API */
export declare class PactTransformer {
  /** Transform code string with options */
  transform(code: string, options?: TransformOptions | undefined | null): Promise<TransformResult>;
  /** Transform single file with options and optional watch mode */
  transformFile(filePath: string, options?: TransformFileOptions | undefined | null): Promise<FileResult>;
  /** Transform multiple files with options and optional watch mode */
  transformFiles(patterns: Array<string>, options?: TransformFilesOptions | undefined | null): Promise<BatchResult>;
  /** Get parsing errors for source code */
  getErrors(source: string): Array<ErrorInfo>;
  /** Parse Pact source and return module AST */
  parse(source: string): Array<ModuleInfo>;
}
