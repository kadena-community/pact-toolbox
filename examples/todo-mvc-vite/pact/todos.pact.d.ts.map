{"version":3,"file":"todos.pact.d.ts","sources":["todos.pact"],"sourcesContent":["(namespace 'free)\n\n(module todos GOVERNANCE\n  \"A simple todos module\"\n\n  (defcap GOVERNANCE ()\n    \"A capability to administer the todos module\"\n    true)\n\n  (defschema todo\n    \"A todo item\"\n    id:string\n    title:string\n    completed:bool\n    deleted:bool\n  )\n\n  (deftable todo-table:{todo})\n\n  (defun create-todo:string (id:string title:string)\n    \"Create new todo with ID and TITLE.\"\n    (insert todo-table id {\n      \"id\": id,\n      \"title\": title,\n      \"completed\": false,\n      \"deleted\": false\n    })\n  )\n\n  (defun toggle-todo:string (id:string)\n    \"Toggle completed status flag for todo at ID.\"\n    (with-read todo-table id { \"completed\":= state }\n      (update todo-table id { \"completed\": (not state) })\n    )\n  )\n\n  (defun update-todo:string (id:string title:string)\n    \"Update todo at ID.\"\n    (update todo-table id { \"title\": title })\n  )\n\n  (defun delete-todo:string (id:string)\n    \"Delete todo at ID (by setting deleted flag).\"\n    (update todo-table id { \"deleted\": true })\n  )\n\n  (defun get-todo:object{todo} (id:string)\n    \"Get a single todo\"\n    (read todo-table id)\n  )\n\n  (defun get-todos:[object{todo}] ()\n    \"Get all todos.\"\n    (filter (lambda (todo) (= (at \"deleted\" todo) false)) (map (get-todo) (keys todo-table)))\n  )\n)\n\n(if (read-msg \"upgrade\") [\"Module upgraded\"] [(create-table todo-table)])\n"],"names":["Todo","createTodo","toggleTodo","updateTodo","deleteTodo","getTodo","getTodos"],"mappings":";;;;;;oBASGA;;;;;;;;;;mBAUAC;;;;mBAUAC;;;;mBAOAC;;;;mBAKAC;;;;mBAKAC;;;;mBAKAC"}